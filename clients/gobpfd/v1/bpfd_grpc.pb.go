// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: bpfd.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BpfdClient is the client API for Bpfd service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BpfdClient interface {
	Load(ctx context.Context, in *LoadRequest, opts ...grpc.CallOption) (*LoadResponse, error)
	Unload(ctx context.Context, in *UnloadRequest, opts ...grpc.CallOption) (*UnloadResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	PullBytecode(ctx context.Context, in *PullBytecodeRequest, opts ...grpc.CallOption) (*PullBytecodeResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
}

type bpfdClient struct {
	cc grpc.ClientConnInterface
}

func NewBpfdClient(cc grpc.ClientConnInterface) BpfdClient {
	return &bpfdClient{cc}
}

func (c *bpfdClient) Load(ctx context.Context, in *LoadRequest, opts ...grpc.CallOption) (*LoadResponse, error) {
	out := new(LoadResponse)
	err := c.cc.Invoke(ctx, "/bpfd.v1.Bpfd/Load", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bpfdClient) Unload(ctx context.Context, in *UnloadRequest, opts ...grpc.CallOption) (*UnloadResponse, error) {
	out := new(UnloadResponse)
	err := c.cc.Invoke(ctx, "/bpfd.v1.Bpfd/Unload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bpfdClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/bpfd.v1.Bpfd/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bpfdClient) PullBytecode(ctx context.Context, in *PullBytecodeRequest, opts ...grpc.CallOption) (*PullBytecodeResponse, error) {
	out := new(PullBytecodeResponse)
	err := c.cc.Invoke(ctx, "/bpfd.v1.Bpfd/PullBytecode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bpfdClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/bpfd.v1.Bpfd/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BpfdServer is the server API for Bpfd service.
// All implementations must embed UnimplementedBpfdServer
// for forward compatibility
type BpfdServer interface {
	Load(context.Context, *LoadRequest) (*LoadResponse, error)
	Unload(context.Context, *UnloadRequest) (*UnloadResponse, error)
	List(context.Context, *ListRequest) (*ListResponse, error)
	PullBytecode(context.Context, *PullBytecodeRequest) (*PullBytecodeResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	mustEmbedUnimplementedBpfdServer()
}

// UnimplementedBpfdServer must be embedded to have forward compatible implementations.
type UnimplementedBpfdServer struct {
}

func (UnimplementedBpfdServer) Load(context.Context, *LoadRequest) (*LoadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Load not implemented")
}
func (UnimplementedBpfdServer) Unload(context.Context, *UnloadRequest) (*UnloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unload not implemented")
}
func (UnimplementedBpfdServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedBpfdServer) PullBytecode(context.Context, *PullBytecodeRequest) (*PullBytecodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullBytecode not implemented")
}
func (UnimplementedBpfdServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedBpfdServer) mustEmbedUnimplementedBpfdServer() {}

// UnsafeBpfdServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BpfdServer will
// result in compilation errors.
type UnsafeBpfdServer interface {
	mustEmbedUnimplementedBpfdServer()
}

func RegisterBpfdServer(s grpc.ServiceRegistrar, srv BpfdServer) {
	s.RegisterService(&Bpfd_ServiceDesc, srv)
}

func _Bpfd_Load_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BpfdServer).Load(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bpfd.v1.Bpfd/Load",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BpfdServer).Load(ctx, req.(*LoadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bpfd_Unload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BpfdServer).Unload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bpfd.v1.Bpfd/Unload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BpfdServer).Unload(ctx, req.(*UnloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bpfd_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BpfdServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bpfd.v1.Bpfd/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BpfdServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bpfd_PullBytecode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullBytecodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BpfdServer).PullBytecode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bpfd.v1.Bpfd/PullBytecode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BpfdServer).PullBytecode(ctx, req.(*PullBytecodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bpfd_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BpfdServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bpfd.v1.Bpfd/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BpfdServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Bpfd_ServiceDesc is the grpc.ServiceDesc for Bpfd service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bpfd_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bpfd.v1.Bpfd",
	HandlerType: (*BpfdServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Load",
			Handler:    _Bpfd_Load_Handler,
		},
		{
			MethodName: "Unload",
			Handler:    _Bpfd_Unload_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Bpfd_List_Handler,
		},
		{
			MethodName: "PullBytecode",
			Handler:    _Bpfd_PullBytecode_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Bpfd_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bpfd.proto",
}
