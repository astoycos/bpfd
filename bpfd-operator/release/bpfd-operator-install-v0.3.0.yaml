apiVersion: v1
kind: Namespace
metadata:
  labels:
    app.kubernetes.io/component: manager
    app.kubernetes.io/created-by: bpfd-operator
    app.kubernetes.io/instance: system
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: namespace
    app.kubernetes.io/part-of: bpfd-operator
    control-plane: controller-manager
  name: bpfd
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.3
  creationTimestamp: null
  name: bpfprograms.bpfd.dev
spec:
  group: bpfd.dev
  names:
    kind: BpfProgram
    listKind: BpfProgramList
    plural: bpfprograms
    singular: bpfprogram
  scope: Cluster
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: BpfProgram is the Schema for the Bpfprograms API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: BpfProgramSpec defines the desired state of BpfProgram
            properties:
              maps:
                additionalProperties:
                  type: string
                description: 'Maps is a map with Keys: Map Names, and Values: Map Pin paths'
                type: object
              type:
                description: Type specifies the bpf program type
                type: string
            type: object
          status:
            description: BpfProgramStatus defines the observed state of BpfProgram TODO Make these a fixed set of metav1.Condition.types and metav1.Condition.reasons
            properties:
              conditions:
                description: 'Conditions houses the updates regarding the actual implementation of the bpf program on the node Known .status.conditions.type are: "Available", "Progressing", and "Degraded"'
                items:
                  description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
                x-kubernetes-list-map-keys:
                - type
                x-kubernetes-list-type: map
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.3
  creationTimestamp: null
  name: kprobeprograms.bpfd.dev
spec:
  group: bpfd.dev
  names:
    kind: KprobeProgram
    listKind: KprobeProgramList
    plural: kprobeprograms
    singular: kprobeprogram
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .spec.bpffunctionname
      name: BpfFunctionName
      type: string
    - jsonPath: .spec.nodeselector
      name: NodeSelector
      type: string
    - jsonPath: .spec.func_name
      name: FunctionName
      priority: 1
      type: string
    - jsonPath: .spec.offset
      name: Offset
      priority: 1
      type: integer
    - jsonPath: .spec.retprobe
      name: RetProbe
      priority: 1
      type: boolean
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: KprobeProgram is the Schema for the KprobePrograms API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: KprobeProgramSpec defines the desired state of KprobeProgram
            properties:
              bpffunctionname:
                description: BpfFunctionName is the name of the function that is the entry point for the BPF program
                type: string
              bytecode:
                description: Bytecode configures where the bpf program's bytecode should be loaded from.
                properties:
                  image:
                    description: Image used to specify a bytecode container image.
                    properties:
                      imagepullpolicy:
                        default: IfNotPresent
                        description: PullPolicy describes a policy for if/when to pull a bytecode image. Defaults to IfNotPresent.
                        enum:
                        - Always
                        - Never
                        - IfNotPresent
                        type: string
                      imagepullsecret:
                        description: ImagePullSecret is the name of the secret bpfd should use to get remote image repository secrets.
                        properties:
                          name:
                            description: Name of the secret which contains the credentials to access the image repository.
                            type: string
                          namespace:
                            description: Namespace of the secret which contains the credentials to access the image repository.
                            type: string
                        required:
                        - name
                        - namespace
                        type: object
                      url:
                        description: Valid container image URL used to reference a remote bytecode image.
                        type: string
                    required:
                    - url
                    type: object
                  path:
                    description: Path is used to specify a bytecode object via filepath.
                    type: string
                type: object
              func_names:
                description: Functions to attach the kprobe to.
                items:
                  type: string
                type: array
              globaldata:
                additionalProperties:
                  format: byte
                  type: string
                description: GlobalData allows the user to to set global variables when the program is loaded with an array of raw bytes. This is a very low level primitive. The caller is responsible for formatting the byte string appropriately considering such things as size, endianness, alignment and packing of data structures.
                type: object
              mapownerselector:
                description: MapOwnerSelector is used to select the loaded eBPF program this eBPF program will share a map with. The value is a label applied to the BpfProgram to select. The selector must resolve to exactly one instance of a BpfProgram on a given node or the eBPF program will not load.
                properties:
                  matchExpressions:
                    description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                    items:
                      description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                      properties:
                        key:
                          description: key is the label key that the selector applies to.
                          type: string
                        operator:
                          description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                          type: string
                        values:
                          description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      type: object
                    type: array
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                    type: object
                type: object
                x-kubernetes-map-type: atomic
              nodeselector:
                description: NodeSelector allows the user to specify which nodes to deploy the bpf program to.  This field must be specified, to select all nodes use standard metav1.LabelSelector semantics and make it empty.
                properties:
                  matchExpressions:
                    description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                    items:
                      description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                      properties:
                        key:
                          description: key is the label key that the selector applies to.
                          type: string
                        operator:
                          description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                          type: string
                        values:
                          description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      type: object
                    type: array
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                    type: object
                type: object
                x-kubernetes-map-type: atomic
              offset:
                default: 0
                description: Offset added to the address of the function for kprobe. Not allowed for kretprobes.
                format: int64
                type: integer
              retprobe:
                default: false
                description: Whether the program is a kretprobe.  Default is false
                type: boolean
            required:
            - bpffunctionname
            - bytecode
            - func_names
            - nodeselector
            type: object
            x-kubernetes-validations:
            - message: offset cannot be set for kretprobes
              rule: self.retprobe == false || self.offset == 0
          status:
            description: KprobeProgramStatus defines the observed state of KprobeProgram
            properties:
              conditions:
                description: Conditions houses the global cluster state for the KprobeProgram. The explicit condition types are defined internally.
                items:
                  description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
                x-kubernetes-list-map-keys:
                - type
                x-kubernetes-list-type: map
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.3
  creationTimestamp: null
  name: tcprograms.bpfd.dev
spec:
  group: bpfd.dev
  names:
    kind: TcProgram
    listKind: TcProgramList
    plural: tcprograms
    singular: tcprogram
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .spec.bpffunctionname
      name: BpfFunctionName
      type: string
    - jsonPath: .spec.nodeselector
      name: NodeSelector
      type: string
    - jsonPath: .spec.priority
      name: Priority
      priority: 1
      type: string
    - jsonPath: .spec.direction
      name: Direction
      priority: 1
      type: string
    - jsonPath: .spec.interfaceselector
      name: InterfaceSelector
      priority: 1
      type: string
    - jsonPath: .spec.proceedon
      name: ProceedOn
      priority: 1
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: TcProgram is the Schema for the TcProgram API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: TcProgramSpec defines the desired state of TcProgram
            properties:
              bpffunctionname:
                description: BpfFunctionName is the name of the function that is the entry point for the BPF program
                type: string
              bytecode:
                description: Bytecode configures where the bpf program's bytecode should be loaded from.
                properties:
                  image:
                    description: Image used to specify a bytecode container image.
                    properties:
                      imagepullpolicy:
                        default: IfNotPresent
                        description: PullPolicy describes a policy for if/when to pull a bytecode image. Defaults to IfNotPresent.
                        enum:
                        - Always
                        - Never
                        - IfNotPresent
                        type: string
                      imagepullsecret:
                        description: ImagePullSecret is the name of the secret bpfd should use to get remote image repository secrets.
                        properties:
                          name:
                            description: Name of the secret which contains the credentials to access the image repository.
                            type: string
                          namespace:
                            description: Namespace of the secret which contains the credentials to access the image repository.
                            type: string
                        required:
                        - name
                        - namespace
                        type: object
                      url:
                        description: Valid container image URL used to reference a remote bytecode image.
                        type: string
                    required:
                    - url
                    type: object
                  path:
                    description: Path is used to specify a bytecode object via filepath.
                    type: string
                type: object
              direction:
                description: Direction specifies the direction of traffic the tc program should attach to for a given network device.
                enum:
                - ingress
                - egress
                type: string
              globaldata:
                additionalProperties:
                  format: byte
                  type: string
                description: GlobalData allows the user to to set global variables when the program is loaded with an array of raw bytes. This is a very low level primitive. The caller is responsible for formatting the byte string appropriately considering such things as size, endianness, alignment and packing of data structures.
                type: object
              interfaceselector:
                description: Selector to determine the network interface (or interfaces)
                maxProperties: 1
                minProperties: 1
                properties:
                  interfaces:
                    description: Interfaces refers to a list of network interfaces to attach the BPF program to.
                    items:
                      type: string
                    type: array
                  primarynodeinterface:
                    description: Attach BPF program to the primary interface on the node. Only 'true' accepted.
                    type: boolean
                type: object
              mapownerselector:
                description: MapOwnerSelector is used to select the loaded eBPF program this eBPF program will share a map with. The value is a label applied to the BpfProgram to select. The selector must resolve to exactly one instance of a BpfProgram on a given node or the eBPF program will not load.
                properties:
                  matchExpressions:
                    description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                    items:
                      description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                      properties:
                        key:
                          description: key is the label key that the selector applies to.
                          type: string
                        operator:
                          description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                          type: string
                        values:
                          description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      type: object
                    type: array
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                    type: object
                type: object
                x-kubernetes-map-type: atomic
              nodeselector:
                description: NodeSelector allows the user to specify which nodes to deploy the bpf program to.  This field must be specified, to select all nodes use standard metav1.LabelSelector semantics and make it empty.
                properties:
                  matchExpressions:
                    description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                    items:
                      description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                      properties:
                        key:
                          description: key is the label key that the selector applies to.
                          type: string
                        operator:
                          description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                          type: string
                        values:
                          description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      type: object
                    type: array
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                    type: object
                type: object
                x-kubernetes-map-type: atomic
              priority:
                description: Priority specifies the priority of the tc program in relation to other programs of the same type with the same attach point. It is a value from 0 to 1000 where lower values have higher precedence.
                format: int32
                maximum: 1000
                minimum: 0
                type: integer
              proceedon:
                default:
                - pipe
                - dispatcher_return
                description: ProceedOn allows the user to call other tc programs in chain on this exit code. Multiple values are supported by repeating the parameter.
                items:
                  enum:
                  - unspec
                  - ok
                  - reclassify
                  - shot
                  - pipe
                  - stolen
                  - queued
                  - repeat
                  - redirect
                  - trap
                  - dispatcher_return
                  type: string
                maxItems: 11
                type: array
            required:
            - bpffunctionname
            - bytecode
            - direction
            - interfaceselector
            - nodeselector
            - priority
            type: object
          status:
            description: TcProgramStatus defines the observed state of TcProgram
            properties:
              conditions:
                description: Conditions houses the global cluster state for the TcProgram. The explicit condition types are defined internally.
                items:
                  description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
                x-kubernetes-list-map-keys:
                - type
                x-kubernetes-list-type: map
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.3
  creationTimestamp: null
  name: tracepointprograms.bpfd.dev
spec:
  group: bpfd.dev
  names:
    kind: TracepointProgram
    listKind: TracepointProgramList
    plural: tracepointprograms
    singular: tracepointprogram
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .spec.bpffunctionname
      name: BpfFunctionName
      type: string
    - jsonPath: .spec.nodeselector
      name: NodeSelector
      type: string
    - jsonPath: .spec.name
      name: TracePoint
      priority: 1
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: TracepointProgram is the Schema for the TracepointPrograms API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: TracepointProgramSpec defines the desired state of TracepointProgram
            properties:
              bpffunctionname:
                description: BpfFunctionName is the name of the function that is the entry point for the BPF program
                type: string
              bytecode:
                description: Bytecode configures where the bpf program's bytecode should be loaded from.
                properties:
                  image:
                    description: Image used to specify a bytecode container image.
                    properties:
                      imagepullpolicy:
                        default: IfNotPresent
                        description: PullPolicy describes a policy for if/when to pull a bytecode image. Defaults to IfNotPresent.
                        enum:
                        - Always
                        - Never
                        - IfNotPresent
                        type: string
                      imagepullsecret:
                        description: ImagePullSecret is the name of the secret bpfd should use to get remote image repository secrets.
                        properties:
                          name:
                            description: Name of the secret which contains the credentials to access the image repository.
                            type: string
                          namespace:
                            description: Namespace of the secret which contains the credentials to access the image repository.
                            type: string
                        required:
                        - name
                        - namespace
                        type: object
                      url:
                        description: Valid container image URL used to reference a remote bytecode image.
                        type: string
                    required:
                    - url
                    type: object
                  path:
                    description: Path is used to specify a bytecode object via filepath.
                    type: string
                type: object
              globaldata:
                additionalProperties:
                  format: byte
                  type: string
                description: GlobalData allows the user to to set global variables when the program is loaded with an array of raw bytes. This is a very low level primitive. The caller is responsible for formatting the byte string appropriately considering such things as size, endianness, alignment and packing of data structures.
                type: object
              mapownerselector:
                description: MapOwnerSelector is used to select the loaded eBPF program this eBPF program will share a map with. The value is a label applied to the BpfProgram to select. The selector must resolve to exactly one instance of a BpfProgram on a given node or the eBPF program will not load.
                properties:
                  matchExpressions:
                    description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                    items:
                      description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                      properties:
                        key:
                          description: key is the label key that the selector applies to.
                          type: string
                        operator:
                          description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                          type: string
                        values:
                          description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      type: object
                    type: array
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                    type: object
                type: object
                x-kubernetes-map-type: atomic
              names:
                description: Names refers to the names of kernel tracepoints to attach the bpf program to.
                items:
                  type: string
                type: array
              nodeselector:
                description: NodeSelector allows the user to specify which nodes to deploy the bpf program to.  This field must be specified, to select all nodes use standard metav1.LabelSelector semantics and make it empty.
                properties:
                  matchExpressions:
                    description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                    items:
                      description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                      properties:
                        key:
                          description: key is the label key that the selector applies to.
                          type: string
                        operator:
                          description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                          type: string
                        values:
                          description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      type: object
                    type: array
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                    type: object
                type: object
                x-kubernetes-map-type: atomic
            required:
            - bpffunctionname
            - bytecode
            - names
            - nodeselector
            type: object
          status:
            description: TracepointProgramStatus defines the observed state of TracepointProgram
            properties:
              conditions:
                description: Conditions houses the global cluster state for the TracepointProgram. The explicit condition types are defined internally.
                items:
                  description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
                x-kubernetes-list-map-keys:
                - type
                x-kubernetes-list-type: map
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.3
  creationTimestamp: null
  name: uprobeprograms.bpfd.dev
spec:
  group: bpfd.dev
  names:
    kind: UprobeProgram
    listKind: UprobeProgramList
    plural: uprobeprograms
    singular: uprobeprogram
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .spec.bpffunctionname
      name: BpfFunctionName
      type: string
    - jsonPath: .spec.nodeselector
      name: NodeSelector
      type: string
    - jsonPath: .spec.func_name
      name: FunctionName
      priority: 1
      type: string
    - jsonPath: .spec.offset
      name: Offset
      priority: 1
      type: integer
    - jsonPath: .spec.target
      name: Target
      priority: 1
      type: string
    - jsonPath: .spec.retprobe
      name: RetProbe
      priority: 1
      type: boolean
    - jsonPath: .spec.pid
      name: Pid
      priority: 1
      type: integer
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: UprobeProgram is the Schema for the UprobePrograms API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: UprobeProgramSpec defines the desired state of UprobeProgram
            properties:
              bpffunctionname:
                description: BpfFunctionName is the name of the function that is the entry point for the BPF program
                type: string
              bytecode:
                description: Bytecode configures where the bpf program's bytecode should be loaded from.
                properties:
                  image:
                    description: Image used to specify a bytecode container image.
                    properties:
                      imagepullpolicy:
                        default: IfNotPresent
                        description: PullPolicy describes a policy for if/when to pull a bytecode image. Defaults to IfNotPresent.
                        enum:
                        - Always
                        - Never
                        - IfNotPresent
                        type: string
                      imagepullsecret:
                        description: ImagePullSecret is the name of the secret bpfd should use to get remote image repository secrets.
                        properties:
                          name:
                            description: Name of the secret which contains the credentials to access the image repository.
                            type: string
                          namespace:
                            description: Namespace of the secret which contains the credentials to access the image repository.
                            type: string
                        required:
                        - name
                        - namespace
                        type: object
                      url:
                        description: Valid container image URL used to reference a remote bytecode image.
                        type: string
                    required:
                    - url
                    type: object
                  path:
                    description: Path is used to specify a bytecode object via filepath.
                    type: string
                type: object
              func_name:
                description: Function to attach the uprobe to.
                type: string
              globaldata:
                additionalProperties:
                  format: byte
                  type: string
                description: GlobalData allows the user to to set global variables when the program is loaded with an array of raw bytes. This is a very low level primitive. The caller is responsible for formatting the byte string appropriately considering such things as size, endianness, alignment and packing of data structures.
                type: object
              mapownerselector:
                description: MapOwnerSelector is used to select the loaded eBPF program this eBPF program will share a map with. The value is a label applied to the BpfProgram to select. The selector must resolve to exactly one instance of a BpfProgram on a given node or the eBPF program will not load.
                properties:
                  matchExpressions:
                    description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                    items:
                      description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                      properties:
                        key:
                          description: key is the label key that the selector applies to.
                          type: string
                        operator:
                          description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                          type: string
                        values:
                          description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      type: object
                    type: array
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                    type: object
                type: object
                x-kubernetes-map-type: atomic
              nodeselector:
                description: NodeSelector allows the user to specify which nodes to deploy the bpf program to.  This field must be specified, to select all nodes use standard metav1.LabelSelector semantics and make it empty.
                properties:
                  matchExpressions:
                    description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                    items:
                      description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                      properties:
                        key:
                          description: key is the label key that the selector applies to.
                          type: string
                        operator:
                          description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                          type: string
                        values:
                          description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      type: object
                    type: array
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                    type: object
                type: object
                x-kubernetes-map-type: atomic
              offset:
                default: 0
                description: Offset added to the address of the function for uprobe.
                format: int64
                type: integer
              pid:
                description: Only execute uprobe for given process identification number (PID). If PID is not provided, uprobe executes for all PIDs.
                format: int32
                type: integer
              retprobe:
                default: false
                description: Whether the program is a uretprobe.  Default is false
                type: boolean
              target:
                description: Library name or the absolute path to a binary or library.
                items:
                  type: string
                type: array
            required:
            - bpffunctionname
            - bytecode
            - nodeselector
            - target
            type: object
          status:
            description: UprobeProgramStatus defines the observed state of UprobeProgram
            properties:
              conditions:
                description: Conditions houses the global cluster state for the UprobeProgram. The explicit condition types are defined internally.
                items:
                  description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
                x-kubernetes-list-map-keys:
                - type
                x-kubernetes-list-type: map
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.3
  creationTimestamp: null
  name: xdpprograms.bpfd.dev
spec:
  group: bpfd.dev
  names:
    kind: XdpProgram
    listKind: XdpProgramList
    plural: xdpprograms
    singular: xdpprogram
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .spec.bpffunctionname
      name: BpfFunctionName
      type: string
    - jsonPath: .spec.nodeselector
      name: NodeSelector
      type: string
    - jsonPath: .spec.priority
      name: Priority
      priority: 1
      type: string
    - jsonPath: .spec.interfaceselector
      name: InterfaceSelector
      priority: 1
      type: string
    - jsonPath: .spec.proceedon
      name: ProceedOn
      priority: 1
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: XdpProgram is the Schema for the XdpPrograms API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: XdpProgramSpec defines the desired state of XdpProgram
            properties:
              bpffunctionname:
                description: BpfFunctionName is the name of the function that is the entry point for the BPF program
                type: string
              bytecode:
                description: Bytecode configures where the bpf program's bytecode should be loaded from.
                properties:
                  image:
                    description: Image used to specify a bytecode container image.
                    properties:
                      imagepullpolicy:
                        default: IfNotPresent
                        description: PullPolicy describes a policy for if/when to pull a bytecode image. Defaults to IfNotPresent.
                        enum:
                        - Always
                        - Never
                        - IfNotPresent
                        type: string
                      imagepullsecret:
                        description: ImagePullSecret is the name of the secret bpfd should use to get remote image repository secrets.
                        properties:
                          name:
                            description: Name of the secret which contains the credentials to access the image repository.
                            type: string
                          namespace:
                            description: Namespace of the secret which contains the credentials to access the image repository.
                            type: string
                        required:
                        - name
                        - namespace
                        type: object
                      url:
                        description: Valid container image URL used to reference a remote bytecode image.
                        type: string
                    required:
                    - url
                    type: object
                  path:
                    description: Path is used to specify a bytecode object via filepath.
                    type: string
                type: object
              globaldata:
                additionalProperties:
                  format: byte
                  type: string
                description: GlobalData allows the user to to set global variables when the program is loaded with an array of raw bytes. This is a very low level primitive. The caller is responsible for formatting the byte string appropriately considering such things as size, endianness, alignment and packing of data structures.
                type: object
              interfaceselector:
                description: Selector to determine the network interface (or interfaces)
                maxProperties: 1
                minProperties: 1
                properties:
                  interfaces:
                    description: Interfaces refers to a list of network interfaces to attach the BPF program to.
                    items:
                      type: string
                    type: array
                  primarynodeinterface:
                    description: Attach BPF program to the primary interface on the node. Only 'true' accepted.
                    type: boolean
                type: object
              mapownerselector:
                description: MapOwnerSelector is used to select the loaded eBPF program this eBPF program will share a map with. The value is a label applied to the BpfProgram to select. The selector must resolve to exactly one instance of a BpfProgram on a given node or the eBPF program will not load.
                properties:
                  matchExpressions:
                    description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                    items:
                      description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                      properties:
                        key:
                          description: key is the label key that the selector applies to.
                          type: string
                        operator:
                          description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                          type: string
                        values:
                          description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      type: object
                    type: array
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                    type: object
                type: object
                x-kubernetes-map-type: atomic
              nodeselector:
                description: NodeSelector allows the user to specify which nodes to deploy the bpf program to.  This field must be specified, to select all nodes use standard metav1.LabelSelector semantics and make it empty.
                properties:
                  matchExpressions:
                    description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                    items:
                      description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                      properties:
                        key:
                          description: key is the label key that the selector applies to.
                          type: string
                        operator:
                          description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                          type: string
                        values:
                          description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      type: object
                    type: array
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                    type: object
                type: object
                x-kubernetes-map-type: atomic
              priority:
                description: Priority specifies the priority of the bpf program in relation to other programs of the same type with the same attach point. It is a value from 0 to 1000 where lower values have higher precedence.
                format: int32
                maximum: 1000
                minimum: 0
                type: integer
              proceedon:
                default:
                - pass
                - dispatcher_return
                items:
                  enum:
                  - aborted
                  - drop
                  - pass
                  - tx
                  - redirect
                  - dispatcher_return
                  type: string
                maxItems: 6
                type: array
            required:
            - bpffunctionname
            - bytecode
            - interfaceselector
            - nodeselector
            - priority
            type: object
          status:
            description: XdpProgramStatus defines the observed state of XdpProgram
            properties:
              conditions:
                description: Conditions houses the global cluster state for the XdpProgram. The explicit condition types are defined internally.
                items:
                  description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
                x-kubernetes-list-map-keys:
                - type
                x-kubernetes-list-type: map
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: bpfd-daemon
  namespace: bpfd
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: bpfd-operator
  namespace: bpfd
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: bpfd-operator
    app.kubernetes.io/instance: leader-election-role
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: role
    app.kubernetes.io/part-of: bpfd-operator
  name: bpfd-leader-election-role
  namespace: bpfd
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: bpfd-agent-role
rules:
- apiGroups:
  - bpfd.dev
  resources:
  - bpfprograms
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - bpfd.dev
  resources:
  - bpfprograms/finalizers
  verbs:
  - update
- apiGroups:
  - bpfd.dev
  resources:
  - bpfprograms/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - bpfd.dev
  resources:
  - kprobeprograms
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - bpfd.dev
  resources:
  - kprobeprograms/finalizers
  verbs:
  - update
- apiGroups:
  - bpfd.dev
  resources:
  - tcprograms
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - bpfd.dev
  resources:
  - tcprograms/finalizers
  verbs:
  - update
- apiGroups:
  - bpfd.dev
  resources:
  - tracepointprograms
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - bpfd.dev
  resources:
  - tracepointprograms/finalizers
  verbs:
  - update
- apiGroups:
  - bpfd.dev
  resources:
  - uprobeprograms
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - bpfd.dev
  resources:
  - uprobeprograms/finalizers
  verbs:
  - update
- apiGroups:
  - bpfd.dev
  resources:
  - xdpprograms
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - bpfd.dev
  resources:
  - xdpprograms/finalizers
  verbs:
  - update
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: bpfd-operator
    app.kubernetes.io/instance: bpfprogram-editor-role
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: clusterrole
    app.kubernetes.io/part-of: bpfd-operator
  name: bpfd-bpfprogram-editor-role
rules:
- apiGroups:
  - bpfd.dev
  resources:
  - bpfprograms
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - bpfd.dev
  resources:
  - bpfprograms/status
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: bpfd-operator
    app.kubernetes.io/instance: bpfprogram-viewer-role
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: clusterrole
    app.kubernetes.io/part-of: bpfd-operator
  name: bpfd-bpfprogram-viewer-role
rules:
- apiGroups:
  - bpfd.dev
  resources:
  - bpfprograms
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - bpfd.dev
  resources:
  - bpfprograms/status
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: kube-rbac-proxy
    app.kubernetes.io/created-by: bpfd-operator
    app.kubernetes.io/instance: metrics-reader
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: clusterrole
    app.kubernetes.io/part-of: bpfd-operator
  name: bpfd-metrics-reader
rules:
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: bpfd-operator-role
rules:
- apiGroups:
  - apps
  resources:
  - daemonsets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - bpfd.dev
  resources:
  - bpfprograms
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - bpfd.dev
  resources:
  - configmaps/finalizers
  verbs:
  - update
- apiGroups:
  - bpfd.dev
  resources:
  - kprobeprograms
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - bpfd.dev
  resources:
  - kprobeprograms/finalizers
  verbs:
  - update
- apiGroups:
  - bpfd.dev
  resources:
  - kprobeprograms/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - bpfd.dev
  resources:
  - tcprograms
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - bpfd.dev
  resources:
  - tcprograms/finalizers
  verbs:
  - update
- apiGroups:
  - bpfd.dev
  resources:
  - tcprograms/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - bpfd.dev
  resources:
  - tracepointprograms
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - bpfd.dev
  resources:
  - tracepointprograms/finalizers
  verbs:
  - update
- apiGroups:
  - bpfd.dev
  resources:
  - tracepointprograms/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - bpfd.dev
  resources:
  - uprobeprograms
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - bpfd.dev
  resources:
  - uprobeprograms/finalizers
  verbs:
  - update
- apiGroups:
  - bpfd.dev
  resources:
  - uprobeprograms/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - bpfd.dev
  resources:
  - xdpprograms
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - bpfd.dev
  resources:
  - xdpprograms/finalizers
  verbs:
  - update
- apiGroups:
  - bpfd.dev
  resources:
  - xdpprograms/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - create
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - storage.k8s.io
  resources:
  - csidrivers
  verbs:
  - create
  - delete
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: kube-rbac-proxy
    app.kubernetes.io/created-by: bpfd-operator
    app.kubernetes.io/instance: proxy-role
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: clusterrole
    app.kubernetes.io/part-of: bpfd-operator
  name: bpfd-proxy-role
rules:
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: bpfd-operator
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: rolebinding
    app.kubernetes.io/part-of: bpfd-operator
  name: bpfd-agent-rolebinding
  namespace: bpfd
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: bpfd-agent-role
subjects:
- kind: ServiceAccount
  name: bpfd-daemon
  namespace: bpfd
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: bpfd-operator
    app.kubernetes.io/instance: leader-election-rolebinding
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: rolebinding
    app.kubernetes.io/part-of: bpfd-operator
  name: bpfd-leader-election-rolebinding
  namespace: bpfd
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: bpfd-leader-election-role
subjects:
- kind: ServiceAccount
  name: bpfd-operator
  namespace: bpfd
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: bpfd-operator
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: clusterrolebinding
    app.kubernetes.io/part-of: bpfd-operator
  name: bpfd-agent-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: bpfd-agent-role
subjects:
- kind: ServiceAccount
  name: bpfd-daemon
  namespace: bpfd
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: bpfd-operator
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: clusterrolebinding
    app.kubernetes.io/part-of: bpfd-operator
  name: bpfd-bpfd-operator-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: bpfd-operator-role
subjects:
- kind: ServiceAccount
  name: bpfd-operator
  namespace: bpfd
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: kube-rbac-proxy
    app.kubernetes.io/created-by: bpfd-operator
    app.kubernetes.io/instance: proxy-rolebinding
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: clusterrolebinding
    app.kubernetes.io/part-of: bpfd-operator
  name: bpfd-proxy-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: bpfd-proxy-role
subjects:
- kind: ServiceAccount
  name: bpfd-operator
  namespace: bpfd
---
apiVersion: v1
data:
  bpfd.agent.image: quay.io/bpfd/bpfd-agent:v0.3.0
  bpfd.agent.log.level: info
  bpfd.image: quay.io/bpfd/bpfd:v0.3.0
  bpfd.log.level: info
  bpfd.toml: |
    [[grpc.endpoints]]
    type = "unix"
    path = "/bpfd-sock/bpfd.sock"
    enabled = true
kind: ConfigMap
metadata:
  name: bpfd-config
  namespace: bpfd
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: kube-rbac-proxy
    app.kubernetes.io/created-by: bpfd-operator
    app.kubernetes.io/instance: controller-manager-metrics-service
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: service
    app.kubernetes.io/part-of: bpfd-operator
    control-plane: controller-manager
  name: bpfd-controller-manager-metrics-service
  namespace: bpfd
spec:
  ports:
  - name: https
    port: 8443
    protocol: TCP
    targetPort: https
  selector:
    control-plane: controller-manager
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: manager
    app.kubernetes.io/created-by: bpfd-operator
    app.kubernetes.io/instance: controller-manager
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: deployment
    app.kubernetes.io/part-of: bpfd-operator
    control-plane: controller-manager
  name: bpfd-operator
  namespace: bpfd
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: controller-manager
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        control-plane: controller-manager
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - amd64
                - arm64
                - ppc64le
                - s390x
              - key: kubernetes.io/os
                operator: In
                values:
                - linux
      containers:
      - args:
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8080/
        - --logtostderr=true
        - --v=0
        image: gcr.io/kubebuilder/kube-rbac-proxy:v0.13.0
        name: kube-rbac-proxy
        ports:
        - containerPort: 8443
          name: https
          protocol: TCP
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 5m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      - args:
        - --health-probe-bind-address=:8081
        - --metrics-bind-address=127.0.0.1:8080
        - --leader-elect
        command:
        - /bpfd-operator
        env:
        - name: GO_LOG
          value: debug
        image: quay.io/bpfd/bpfd-operator:v0.3.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        name: bpfd-operator
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      securityContext:
        runAsNonRoot: true
      serviceAccountName: bpfd-operator
      terminationGracePeriodSeconds: 10
