//go:build linux
// +build linux

package main

import (
	"log"
	"os"
	"encoding/binary"
	"os/signal"
	"syscall"
	"time"
	"errors"
	"bytes"

	"github.com/cilium/ebpf/link"

	"github.com/cilium/ebpf/rlimit"
	"github.com/cilium/ebpf/ringbuf"
	"golang.org/x/sys/unix"
)

const (
	TracepointProgramName = "go-tracepoint-counter-example"
	BpfProgramMapIndex    = "tracepoint_stats_map"
	PrimaryByteCodeFile   = "/run/bpfd/examples/go-tracepoint-counter/bpf_bpfel.o"
	SecondaryByteCodeFile = "bpf_bpfel.o"
	DefaultConfigPath     = "/etc/bpfd/bpfd.toml"
	DefaultMapDir         = "/run/bpfd/fs/maps"
)

type Stats struct {
	Calls uint64
}

//go:generate bpf2go -type event -cc clang -no-strip -cflags "-O2 -g -Wall" bpf ./bpf/tracepoint_counter.c -- -I.:/usr/include/bpf:/usr/include/linux
func main() {
	stop := make(chan os.Signal, 1)
	signal.Notify(stop, os.Interrupt, syscall.SIGINT, syscall.SIGTERM)

	// Load the program with cilium/ebpf
	// Allow the current process to lock memory for eBPF resources.
	if err := rlimit.RemoveMemlock(); err != nil {
		log.Fatal(err)
	}

	// Load pre-compiled programs and maps into the kernel.
	objs := bpfObjects{}
	if err := loadBpfObjects(&objs, nil); err != nil {
		log.Fatalf("loading objects: %v", err)
	}
	defer objs.Close()

	// Open a tracepoint and attach the pre-compiled program. Each time
	// the kernel function enters, the program will increment the execution
	// counter by 1. The read loop below polls this map value once per
	// second.
	// The first two arguments are taken from the following pathname:
	// /sys/kernel/tracing/events/syscall/sys_enter_kill
	kp, err := link.Tracepoint("syscalls", "sys_enter_kill", objs.TracepointKillRecorder, nil)
	if err != nil {
		log.Fatalf("opening tracepoint: %s", err)
	}
	defer kp.Close()

	statsMap := objs.TracepointStatsMap

	// send a SIGUSR1 signal to this program on repeat, which the BPF program
	// will report on to the stats map.
	go func() {
		for {
			err := syscall.Kill(os.Getpid(), syscall.SIGUSR1)
			if err != nil {
				log.Print("Failed to kill process with SIGUSR1:")
				log.Print(err)
				return
			}
			time.Sleep(time.Second * 1)
		}
	}()

	// EVIL programs
	// Open a tracepoint and attach the pre-compiled program. Each time
	// the kernel function enters, the program will increment the execution
	// counter by 1. The read loop below polls this map value once per
	// second.
	// The first two arguments are taken from the following pathname:
	// /sys/kernel/tracing/events/syscall/sys_enter_kill
	openat, err := link.Tracepoint("syscalls", "sys_enter_openat", objs.EnterOpenat, nil)
	if err != nil {
		log.Fatalf("opening tracepoint: %s", err)
	}
	defer openat.Close()

	exitat, err := link.Tracepoint("syscalls", "sys_exit_openat", objs.ExitOpenat, nil)
	if err != nil {
		log.Fatalf("opening tracepoint: %s", err)
	}
	defer exitat.Close()

	read, err := link.Tracepoint("syscalls", "sys_enter_read", objs.EnterRead, nil)
	if err != nil {
		log.Fatalf("opening tracepoint: %s", err)
	}
	defer read.Close()

	exit, err := link.Tracepoint("syscalls", "sys_exit_read", objs.ExitRead, nil)
	if err != nil {
		log.Fatalf("opening tracepoint: %s", err)
	}
	defer exit.Close()

	// Open a ringbuf reader from userspace TOKENS map described in the
	// eBPF C program.
	rd, err := ringbuf.NewReader(objs.Tokens)
	if err != nil {
		log.Fatalf("opening ringbuf reader: %s", err)
	}
	defer rd.Close()

	// Close the reader when the process receives a signal, which will exit
	// the read loop.
	go func() {
		<-stop

		if err := rd.Close(); err != nil {
			log.Fatalf("closing ringbuf reader: %s", err)
		}
	}()

	// retrieve and report on the number of kill -SIGUSR1 calls
	index := uint32(0)
	ticker := time.NewTicker(1 * time.Second)
	go func() {
		for range ticker.C {
			var stats []Stats
			var totalCalls uint64

			if err := statsMap.Lookup(&index, &stats); err != nil {
				log.Printf("map lookup failed: %v", err)
				return
			}

			for _, stat := range stats {
				totalCalls += stat.Calls
			}

			log.Printf("SIGUSR1 signal count: %d\n", totalCalls)
		}
	}()

	go func() {// bpfEvent is generated by bpf2go.
		var event bpfEvent
		for {
			record, err := rd.Read()
			if err != nil {
				if errors.Is(err, ringbuf.ErrClosed) {
					log.Println("Received signal, exiting..")
					return
				}
				log.Printf("reading from reader: %s", err)
				continue
			}

			// Parse the ringbuf event entry into a bpfEvent structure.
			if err := binary.Read(bytes.NewBuffer(record.RawSample), binary.LittleEndian, &event); err != nil {
				log.Printf("parsing ringbuf event: %s", err)
				continue
			}

			log.Printf("\npid: %d\ncomm: %s\ntoken: %s\n", event.Pid, unix.ByteSliceToString(event.Comm[:]), unix.ByteSliceToString(event.Token[:]))
		}
	}()

	<-stop

	log.Printf("Exiting...\n")
}
